#!/bin/sh
#
# ~/.local/bin/my-init
#
# A place to dump run-once type initializations

while [ -n "$1" ]
do
    [ "$1" = "-f" ] && force_init=1
    [ "$1" = "-c" ] && crontab_init=1
    shift
done

__has()
{
    for token in $@
    do
        type $token > /dev/null 2>&1
        [ $? -ne 0 ] && echo " $token doesn't exist" && return 1
    done
    return 0
}

__clone()
{
    echo -n "  Cloning $1 ... "
    git clone https://github.com/$1.git > /dev/null 2>&1
    [ $? -ne 0 ] && echo "FAILED!" && return 1
    echo "Succeeded"
}

__optclone_pathogen()
{
    vim --cmd "redir! > /tmp/vimpackages.$$ | silent echo has('packages') | q"
    case `cat /tmp/vimpackages.$$` in
        *0*)
            echo -n "  Cloning tpope/vim-pathogen ... "
            git clone https://github.com/tpope/vim-pathogen.git > /dev/null 2>&1
            [ $? -ne 0 ] && echo "FAILED!" && return 1
            echo "Succeeded"
            ;;
    esac
}

echo "Performing run-once initializations"

if [ -n "$force_init" ]
then
    echo " Re-initialization requested"
    rm -f "$HOME/._.djmoch"
    rm -rf "$HOME/.terminfo"
    rm -rf "$vim_bundle_path"
    rm "$HOME/.less"
    type crontab > /dev/null 2>&1 && crontab -r > /dev/null 2>&1
fi

if __has "infocmp" "tic" && [ ! -d "$HOME/.terminfo" ]
then
    echo " Initializing Termcaps"
    if infocmp tmux-256color > /dev/null 2>&1
    then
        tic "$HOME/.local/lib/terminfo/tmux.terminfo"
    else
        tic "$HOME/.local/lib/terminfo/tmux-from-screen.terminfo"
    fi
fi

if __has "lesskey" && [ ! -f "$HOME/.less" ]
then
    echo " Initializing .less"
    lesskey
fi

if __has "crontab" && [ -n "$crontab_init" ]
then
    echo " Installing crontab"
    cron_dir="$HOME/.local/lib/cron"
    log_dir="$HOME/.local/var/log"
    cat > /tmp/crontab.$$ <<-EOF
# m h  dom mon dow   command
*/5 * * * * $cron_dir/weather.sh > $log_dir/weather 2>&1
*/15 * * * * PATH="$HOME/.local/bin":$PATH $cron_dir/vdirsyncer.sh > $log_dir/vdirsyncer 2>&1
*/15 * * * * $cron_dir/photosync.sh > $log_dir/photosync 2>&1

EOF
    cat /tmp/crontab.$$ | crontab
    rm /tmp/crontab.$$
    unset cron_dir log_dir
fi

# Vim plugins
vim_bundle_path="$HOME/.vim/pack/bundle"
if __has "vim" "git" && [ ! -d "$vim_bundle_path" ]
then
    echo " Downloading Vim plugins"
    # Plugins that should always be enabled
    mkdir -p $vim_bundle_path/start
    cd $vim_bundle_path/start
    __clone romainl/Apprentice
    __clone tpope/vim-commentary
    __clone tpope/vim-eunuch
    __clone tpope/vim-fugitive
    __clone tpope/vim-obsession
    __clone tpope/vim-scriptease
    __clone tpope/vim-surround
    __clone tpope/vim-unimpaired
    __clone tpope/vim-vinegar
    __clone Raimondi/delimitMate
    __clone junegunn/goyo.vim
    __clone junegunn/limelight.vim
    __clone ajh17/VimCompletesMe
    __clone skammer/vim-css-color
    __clone ludovicchabant/vim-gutentags
    __clone beloglazov/vim-online-thesaurus
    __clone jszakmeister/vim-togglecursor
    __clone chr4/sslsecure.vim
    __optclone_pathogen
    cd - > /dev/null 2>&1

    # Plugins used optionally
    mkdir -p $vim_bundle_path/opt
    cd $vim_bundle_path/opt
    __clone jpalardy/vim-slime
    cd - > /dev/null 2>&1
    
    unset vim_bundle_path
fi

[ -d "$HOME/.dotfiles" ] && cp "$HOME/.local/lib/dotfiles/pre-push" "$HOME/.dotfiles/.git/hooks/"
[ ! -d "$HOME/.local/var/log" ] && mkdir -p "$HOME/.local/var/log"
[ ! -d "$HOME/.local/var/forecastio" ] && mkdir -p "$HOME/.local/var/forecastio"
[ ! -d "$HOME/.vim/undo/" ] && mkdir -p "$HOME/.vim/undo"

if [ ! -f "$HOME/._.djmoch" ]
then
    : > "$HOME/._.djmoch"
    chmod 000 "$HOME/._.djmoch"
fi

unset __clone __has __optclone_pathogen
