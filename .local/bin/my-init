#!/bin/sh
#
# ~/.local/bin/my-init
#
# A place to dump run-once type initializations

while [ -n "$1" ]
do
    [ "$1" = "-f" ] && force_init=1
    [ "$1" = "-c" ] && crontab_init=1
    shift
done

vim_bundle_path="$HOME/.vim/pack/bundle"
configdir=${XDG_CONFIG_HOME:-$HOME/.config}

__has()
{
    for token in $@
    do
        type $token > /dev/null 2>&1
        [ $? -ne 0 ] && echo " $token doesn't exist" && return 1
    done
    return 0
}

__clone()
{
    dir=`echo "$1" | cut -d '/' -f2`
    if [ -d $dir ]
    then
        echo -n "  Updating $1 ..."
        cd $dir
        git pull > /dev/null 2>&1
        result=$?
        cd ..
    else
        echo -n "  Cloning $1 ... "
        git clone https://github.com/$1.git > /dev/null 2>&1
        result=$?
    fi
    [ $result -ne 0 ] && echo "FAILED!" && return 1
    echo "Succeeded"
}

__optclone_pathogen()
{
    vim --cmd "redir! > /tmp/vimpackages.$$ | silent echo has('packages') | q"
    case `cat /tmp/vimpackages.$$` in
        *0*)
            if [ -d vim-pathogen ]
            then
                echo -n "  Updating tpope/vim-pathogen ..."
                cd vim-pathogen
                git pull > /dev/null 2>&1
                result=$?
                cd ..
            else
                echo -n "  Cloning tpope/vim-pathogen ... "
                git clone https://github.com/tpope/vim-pathogen.git > /dev/null 2>&1
                result=$?
            fi
            [ $result -ne 0 ] && echo "FAILED!" && return 1
            echo "Succeeded"
            ;;
    esac
    rm /tmp/vimpackages.$$
}


if [ -n "$force_init" ]
then
    echo "Re-initialization requested"
    rm -f "$HOME/._.djmoch"
    rm -rf "$HOME/.terminfo"
    rm "$HOME/.less"
    rm "$HOME/.gnupg/gpg-agent.conf"
fi

if [ -f "$HOME/._.djmoch" ]
then
    echo "Already initialized. Exiting."
    exit 0
fi

echo "Performing run-once initializations"

if __has "infocmp" "tic"
then
    echo " Initializing Termcaps"
    if infocmp tmux-256color > /dev/null 2>&1
    then
        tic "$HOME/.local/lib/terminfo/tmux.terminfo"
    else
        tic "$HOME/.local/lib/terminfo/tmux-from-screen.terminfo"
    fi
fi

if __has "lesskey"
then
    echo " Initializing .less"
    lesskey
fi

if ps -U $LOGNAME | grep systemd > /dev/null 2>&1 \
    && [ -n "$crontab_init" ]
then
    echo " Installing systemd timers"
    cat >> $configdir/systemd/user/my-cron.service <<-EOF
[Unit]
Description=djmoch "my cron" service

[Service]
Type=simple
ExecStart=$HOME/.local/bin/my cron systemd
EOF
    cat >> $configdir/systemd/user/my-cron.timer <<-EOF
[Unit]
Description=djmoch "my cron" timer

[Timer]
OnBootSec=1min
OnUnitActiveSec=15min

[Install]
WantedBy=timers.target
EOF
    systemctl --user enable my-cron.timer
elif __has "crontab" && [ -n "$crontab_init" ]
then
    echo " Installing crontab"
    crontab -l > /tmp/crontab.$$.orig
    [ $? -ne 0 ] && echo "" > /tmp/crontab.$$.orig
    grep .local/bin/my /tmp/crontab.$$.orig > /dev/null 2>&1
    if [ ! $? -eq 0 ]
    then
        cat >> /tmp/crontab.$$ <<-EOF
# crontab created by my-init on `date '+%m/%d/%Y'`
# m h dom mon dow command
*/15 * * * * "\$HOME/.local/bin/my" cron

# Entries below this line created manually
EOF
        cat /tmp/crontab.$$.orig >> /tmp/crontab.$$
        cat /tmp/crontab.$$ | crontab
        rm /tmp/crontab.$$
    fi
    rm /tmp/crontab.$$.orig
fi

# Vim plugins
if __has "vim" "git"
then
    echo " Downloading Vim plugins"
    # Plugins that should always be enabled
    mkdir -p $vim_bundle_path/start
    cd $vim_bundle_path/start
    __clone romainl/Apprentice
    __clone tpope/vim-commentary
    __clone tpope/vim-eunuch
    __clone tpope/vim-fugitive
    __clone tpope/vim-obsession
    __clone tpope/vim-scriptease
    __clone tpope/vim-surround
    __clone tpope/vim-unimpaired
    __clone tpope/vim-vinegar
    __clone junegunn/goyo.vim
    __clone junegunn/limelight.vim
    __clone beloglazov/vim-online-thesaurus
    __clone chr4/sslsecure.vim
    __optclone_pathogen
    cd - > /dev/null 2>&1

    # Plugins used optionally
    mkdir -p $vim_bundle_path/opt
    cd $vim_bundle_path/opt
    __clone jpalardy/vim-slime
    __clone skammer/vim-css-color
    cd - > /dev/null 2>&1
    
    vim --cmd 'silent! execute "helptags ALL" | q'
    unset vim_bundle_path
fi

for shell in zsh bash dash sh
do
    preferred_shell=`cat /etc/shells | grep /$shell$ | tr '\n' ' ' | cut -d ' ' -f 1`
    [ "$preferred_shell" = "" ] || break
done
if getent passwd | grep ^$LOGNAME.*$preferred_shell$ > /dev/null 2>&1
then
    echo " Login shell already set to $preferred_shell"
else
    echo " Setting login shell to $preferred_shell"
    chsh -s $preferred_shell
fi

for locker in xscreensaver light-locker cinnamon-screensaver
do
    if type $locker > /dev/null 2>&1
    then
        echo " Creating autostart entry for $locker"
        cat > "$HOME/.config/autostart/$locker.desktop" <<-EOF
[Desktop Entry]
TryExec=$locker
Exec=$locker
Name=$locker
Comment=Screen locker
Type=Application
EOF
        break
    fi
done

if [ ! -f "$HOME/.gnupg/gpg-agent.conf" ]
then
    echo " Creating gpg-agent.conf and configuring pinentry"
    pinentry=""
    if type pinentry > /dev/null 2>&1
    then
        pinentry=`which pinentry`
    fi
    case `uname -s` in
        *Darwin*)
            pinentry="/usr/local/bin/pinentry-mac $pinentry"
            ;;
    esac

    for testpath in $pinentry
    do
        if [ -x $testpath ]
        then
            cat > "$HOME/.gnupg/gpg-agent.conf" <<-EOF
default-cache-ttl 600
max-cache-ttl 7200
enable-ssh-support
pinentry-program $testpath
EOF
            break
        fi
    done
fi

[ -d "$HOME/.dotfiles" ] && cp "$HOME/.local/lib/dotfiles/pre-push" "$HOME/.dotfiles/.git/hooks/"
[ ! -d "$HOME/.local/var/log" ] && mkdir -p "$HOME/.local/var/log"
[ ! -d "$HOME/.local/var/forecastio" ] && mkdir -p "$HOME/.local/var/forecastio"
[ ! -d "$HOME/.local/lib/cron.d" ] && mkdir -p "$HOME/.local/lib/cron.d"
[ ! -f "$HOME/.local/var/forecastio/current_forecast.txt" ] && echo \
    "Weather not available" > \
    "$HOME/.local/var/forecastio/current_forecast.txt"
[ ! -d "$HOME/.vim/undo/" ] && mkdir -p "$HOME/.vim/undo"
touch "$HOME/._.djmoch"
chmod 000 "$HOME/._.djmoch"

unset __clone __has __optclone_pathogen
